# -*- coding: utf-8 -*-
import os
import shutil
try:
    import configparser
except ImportError:
    import ConfigParser as configparser


MYCONFIGPATH = os.environ.get("MYCONFIGPATH")
if MYCONFIGPATH is None:
    MYCONFIGPATH = os.path.expanduser("~/myconfig.ini")

if not os.path.isfile(MYCONFIGPATH):
    path = os.path.join(os.path.dirname(__file__), "./myconfig.ini")
    shutil.copy(path, MYCONFIGPATH)


class IniFileReader(object):

    def __init__(self, filepath):
        """open filepath whose type is a ini format.
        and set an ini instance generated by configparser.
        """
        if not os.path.isfile(filepath):
            raise FileNotFoundError("%s doesn't exist" % filepath)
        ini = configparser.RawConfigParser()
        with open(filepath) as f:
            ini.readfp(f)
        self.ini = ini

    def values(self, name, section="DEFAULT"):
        """return a list of values."""
        rv = []
        # convert value
        for val in self.ini.get(section, name).split():
            if os.path.exists(os.path.expanduser(val)):
                val = os.path.expanduser(val)
            rv.append(val)
        if len(rv) == 1:
            return rv[0]
        else:
            return rv

reader = IniFileReader(MYCONFIGPATH)

schema = reader.values("schema", "pw")
path = os.path.expanduser(reader.values("path", "pw"))
url = "%s:///%s" % (schema, path)

config = {
    "url": url,
    "master_key": "",
    "aes_format": "%32s"
}

